package com.foxconn.remote.control.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.foxconn.remote.control.model.Machine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_machine.
*/
public class MachineDao extends AbstractDao<Machine, Long> {

    public static final String TABLENAME = "tb_machine";

    /**
     * Properties of entity Machine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MachineName = new Property(1, String.class, "machineName", false, "MACHINE_NAME");
        public final static Property MachineType = new Property(2, String.class, "machineType", false, "MACHINE_TYPE");
        public final static Property MachineBrand = new Property(3, String.class, "machineBrand", false, "MACHINE_BRAND");
        public final static Property SerialNo = new Property(4, String.class, "serialNo", false, "SERIAL_NO");
        public final static Property Img = new Property(5, byte[].class, "img", false, "IMG");
        public final static Property Status = new Property(6, Boolean.class, "status", false, "STATUS");
        public final static Property Column = new Property(7, Integer.class, "column", false, "COLUMN");
        public final static Property RoomId = new Property(8, long.class, "roomId", false, "ROOM_ID");
    };

    private Query<Machine> room_MachineListQuery;

    public MachineDao(DaoConfig config) {
        super(config);
    }
    
    public MachineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tb_machine' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MACHINE_NAME' TEXT," + // 1: machineName
                "'MACHINE_TYPE' TEXT," + // 2: machineType
                "'MACHINE_BRAND' TEXT," + // 3: machineBrand
                "'SERIAL_NO' TEXT," + // 4: serialNo
                "'IMG' BLOB," + // 5: img
                "'STATUS' INTEGER," + // 6: status
                "'COLUMN' INTEGER," + // 7: column
                "'ROOM_ID' INTEGER NOT NULL );"); // 8: roomId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tb_machine'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Machine entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String machineName = entity.getMachineName();
        if (machineName != null) {
            stmt.bindString(2, machineName);
        }
 
        String machineType = entity.getMachineType();
        if (machineType != null) {
            stmt.bindString(3, machineType);
        }
 
        String machineBrand = entity.getMachineBrand();
        if (machineBrand != null) {
            stmt.bindString(4, machineBrand);
        }
 
        String serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindString(5, serialNo);
        }
 
        byte[] img = entity.getImg();
        if (img != null) {
            stmt.bindBlob(6, img);
        }
 
        Boolean status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status ? 1l: 0l);
        }
 
        Integer column = entity.getColumn();
        if (column != null) {
            stmt.bindLong(8, column);
        }
        stmt.bindLong(9, entity.getRoomId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Machine readEntity(Cursor cursor, int offset) {
        Machine entity = new Machine( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // machineName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // machineType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // machineBrand
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // serialNo
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5), // img
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // status
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // column
            cursor.getLong(offset + 8) // roomId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Machine entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMachineName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMachineType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMachineBrand(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSerialNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImg(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setColumn(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setRoomId(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Machine entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Machine entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "machineList" to-many relationship of Room. */
    public List<Machine> _queryRoom_MachineList(long roomId) {
        synchronized (this) {
            if (room_MachineListQuery == null) {
                QueryBuilder<Machine> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RoomId.eq(null))
                /** eidt by KrisLight not auto-generate **/
                .orderAsc(Properties.Column);
                room_MachineListQuery = queryBuilder.build();
            }
        }
        Query<Machine> query = room_MachineListQuery.forCurrentThread();
        query.setParameter(0, roomId);
        return query.list();
    }

}
