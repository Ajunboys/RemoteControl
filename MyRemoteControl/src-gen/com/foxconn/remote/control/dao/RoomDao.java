package com.foxconn.remote.control.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.foxconn.remote.control.model.Room;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_room.
*/
public class RoomDao extends AbstractDao<Room, Long> {

    public static final String TABLENAME = "tb_room";

    /**
     * Properties of entity Room.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RoomName = new Property(1, String.class, "roomName", false, "ROOM_NAME");
        public final static Property PairStatus = new Property(2, Boolean.class, "pairStatus", false, "PAIR_STATUS");
        public final static Property ImgPath = new Property(3, String.class, "imgPath", false, "IMG_PATH");
        public final static Property ScreenColumn = new Property(4, Integer.class, "screenColumn", false, "SCREEN_COLUMN");
        public final static Property Mac = new Property(5, String.class, "mac", false, "MAC");
        public final static Property IpAddress = new Property(6, String.class, "ipAddress", false, "IP_ADDRESS");
        public final static Property GoldKey = new Property(7, String.class, "goldKey", false, "GOLD_KEY");
    };

    private DaoSession daoSession;


    public RoomDao(DaoConfig config) {
        super(config);
    }
    
    public RoomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tb_room' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ROOM_NAME' TEXT," + // 1: roomName
                "'PAIR_STATUS' INTEGER," + // 2: pairStatus
                "'IMG_PATH' TEXT," + // 3: imgPath
                "'SCREEN_COLUMN' INTEGER," + // 4: screenColumn
                "'MAC' TEXT," + // 5: mac
                "'IP_ADDRESS' TEXT," + // 6: ipAddress
                "'GOLD_KEY' TEXT);"); // 7: goldKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tb_room'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Room entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(2, roomName);
        }
 
        Boolean pairStatus = entity.getPairStatus();
        if (pairStatus != null) {
            stmt.bindLong(3, pairStatus ? 1l: 0l);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(4, imgPath);
        }
 
        Integer screenColumn = entity.getScreenColumn();
        if (screenColumn != null) {
            stmt.bindLong(5, screenColumn);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(6, mac);
        }
 
        String ipAddress = entity.getIpAddress();
        if (ipAddress != null) {
            stmt.bindString(7, ipAddress);
        }
 
        String goldKey = entity.getGoldKey();
        if (goldKey != null) {
            stmt.bindString(8, goldKey);
        }
    }

    @Override
    protected void attachEntity(Room entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Room readEntity(Cursor cursor, int offset) {
        Room entity = new Room( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // roomName
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // pairStatus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imgPath
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // screenColumn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mac
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ipAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // goldKey
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Room entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRoomName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPairStatus(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setImgPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScreenColumn(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMac(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIpAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGoldKey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Room entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Room entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
