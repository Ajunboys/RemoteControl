package com.foxconn.remote.control.model;

import java.io.Serializable;
import java.util.List;
import com.foxconn.remote.control.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.foxconn.remote.control.dao.MachineDao;
import com.foxconn.remote.control.dao.RoomDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table tb_room.
 */
public class Room implements Serializable{

    private Long id;
    private String roomName;
    private Boolean pairStatus;
    private String imgPath;
    private Integer screenColumn;
    private String mac;
    private String ipAddress;
    private String goldKey;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RoomDao myDao;

    private List<Machine> machineList;

    public Room() {
    }

    public Room(Long id) {
        this.id = id;
    }

    public Room(Long id, String roomName, Boolean pairStatus, String imgPath, Integer screenColumn, String mac, String ipAddress, String goldKey) {
        this.id = id;
        this.roomName = roomName;
        this.pairStatus = pairStatus;
        this.imgPath = imgPath;
        this.screenColumn = screenColumn;
        this.mac = mac;
        this.ipAddress = ipAddress;
        this.goldKey = goldKey;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRoomDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRoomName() {
        return roomName;
    }

    public void setRoomName(String roomName) {
        this.roomName = roomName;
    }

    public Boolean getPairStatus() {
        return pairStatus;
    }

    public void setPairStatus(Boolean pairStatus) {
        this.pairStatus = pairStatus;
    }

    public String getImgPath() {
        return imgPath;
    }

    public void setImgPath(String imgPath) {
        this.imgPath = imgPath;
    }

    public Integer getScreenColumn() {
        return screenColumn;
    }

    public void setScreenColumn(Integer screenColumn) {
        this.screenColumn = screenColumn;
    }

    public String getMac() {
        return mac;
    }

    public void setMac(String mac) {
        this.mac = mac;
    }

    public String getIpAddress() {
        return ipAddress;
    }

    public void setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
    }

    public String getGoldKey() {
        return goldKey;
    }

    public void setGoldKey(String goldKey) {
        this.goldKey = goldKey;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Machine> getMachineList() {
        if (machineList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MachineDao targetDao = daoSession.getMachineDao();
            List<Machine> machineListNew = targetDao._queryRoom_MachineList(id);
            synchronized (this) {
                if(machineList == null) {
                    machineList = machineListNew;
                }
            }
        }
        return machineList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMachineList() {
        machineList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
